C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SSD1306
OBJECT MODULE PLACED IN .\src\SSD1306.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\Git
                    -\AutoWatering\Firmware\AutoWaterLight\src\SSD1306.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//
                    -Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/EFM8BB1/inc) PRINT(.\src\
                    -SSD1306.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\SSD1306.OBJ)

line level    source

   1          
   2          #include "main.h"
   3          #include "SSD1306.h"
   4          #include "i2c.h"
   5          
   6          
   7          static const uint8_t code num_font_bitmap[] = {
   8                  // 'Font0', 12x16px
   9                  0xf0, 0xfc, 0xfe, 0xff, 0x0f, 0x07, 0x07, 0x0f, 0xff, 0xfe, 0xfc, 0xf0, 0x0f, 0x3f, 0x7f, 0xff,
  10                  0xf0, 0xe0, 0xe0, 0xf0, 0xff, 0x7f, 0x3f, 0x0f,
  11                  // 'Font1', 12x16px
  12                  0x00, 0x00, 0x1c, 0x1e, 0x0e, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  13                  0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
  14                  // 'Font2', 12x16px
  15                  0x1c, 0x1e, 0x0f, 0x07, 0x07, 0x87, 0xc7, 0xff, 0xfe, 0xfe, 0x7c, 0x00, 0xf0, 0xf8, 0xfc, 0xfe,
  16                  0xef, 0xe7, 0xe7, 0xe3, 0xe1, 0xe0, 0xe0, 0x00,
  17                  // 'Font3', 12x16px
  18                  0x00, 0x0e, 0xc7, 0xc7, 0xc7, 0xc7, 0xe7, 0xff, 0x7e, 0x7e, 0x3c, 0x00, 0x70, 0xe0, 0xe1, 0xe1,
  19                  0xe1, 0xe1, 0xf3, 0xff, 0x7f, 0x3f, 0x1e, 0x00,
  20                  // 'Font4', 12x16px
  21                  0x00, 0x80, 0xc0, 0xf0, 0x78, 0x3e, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x1d,
  22                  0x1c, 0x1c, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x1c,
  23                  // 'Font5', 12x16px
  24                  0x00, 0xfe, 0xff, 0xff, 0xc7, 0xc7, 0xc7, 0xc7, 0x87, 0x87, 0x00, 0x00, 0x00, 0x71, 0xe1, 0xe1,
  25                  0xe1, 0xe1, 0xf3, 0xff, 0x7f, 0x3f, 0x1f, 0x00,
  26                  // 'Font6', 12x16px
  27                  0xe0, 0xf8, 0xfc, 0xfe, 0x9e, 0xcf, 0xc7, 0xc7, 0xc7, 0xc7, 0x87, 0x00, 0x0f, 0x3f, 0x7f, 0x7f,
  28                  0xf3, 0xe1, 0xe1, 0xf1, 0xff, 0x7f, 0x3f, 0x1f,
  29                  // 'Font7', 12x16px
  30                  0x07, 0x07, 0x07, 0x07, 0x07, 0xc7, 0xf7, 0xff, 0x7f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0xc0, 0xfc,
  31                  0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00,
  32                  // 'Font8', 12x16px
  33                  0x00, 0x3c, 0x7e, 0xfe, 0xff, 0xc7, 0xc7, 0xc7, 0xff, 0x7e, 0x7e, 0x3c, 0x1c, 0x7e, 0x7f, 0xff,
  34                  0xf3, 0xe1, 0xe1, 0xf3, 0xff, 0x7f, 0x7f, 0x1c,
  35                  // 'Font9', 12x16px
  36                  0xf8, 0xfc, 0xfe, 0xff, 0x8f, 0x07, 0x07, 0x8f, 0xff, 0xfe, 0xfc, 0xf0, 0x00, 0xf3, 0xe3, 0xe7,
  37                  0xe7, 0xe7, 0xf7, 0x7b, 0x7f, 0x3f, 0x1f, 0x07,
  38                  // 'FontMinus', 12x16px
  39                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
  40                  0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00,
  41          };
  42          
  43          
  44          static const uint8_t code dot_bitmap[] = {
  45                  // 'FontDot', 4x16px
  46                  0x00, 0x00, 0x00, 0x00, 0x60, 0xf0, 0xf0, 0x60
  47          };
  48          
  49          /*
  50          static const uint8_t code colon_bitmap[] = {
  51                  // 'FontColon', 4x16px
  52                  0x60, 0xf0, 0xf0, 0x60, 0x60, 0xf0, 0xf0, 0x60,
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 2   

  53          };
  54          */
  55          
  56          static const uint8_t code time_h_bitmap[] = {
  57          // 'FontTimeH', 6x16px
  58          0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x06, 0xfe, 0xfc,
  59          };
  60          
  61          static const uint8_t code time_m_bitmap[] = {
  62          // 'FontTimeM', 10x16px
  63          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x04, 0x06, 0xfe, 0xfc,
  64          0x04, 0x06, 0xfe, 0xfc,
  65          };
  66          
  67          static const uint8_t code time_s_bitmap[] = {
  68          // 'FontTimeS', 5x16px
  69          0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xde, 0xd6, 0xf6, 0x66,
  70          };
  71          
  72          static const uint8_t code initSSD1306sq[] = { // Initialization Sequence
  73              // Init sequence for Adafruit 128x32 OLED module
  74              SSD1306_DISPLAYOFF,
  75              SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // the suggested ratio 0x80
  76              SSD1306_SETMULTIPLEX, 15,        // ratio 16
  77              SSD1306_SETDISPLAYOFFSET, 0x00,     // no offset
  78              SSD1306_SETSTARTLINE | 0x00,        // line #0
  79              SSD1306_CHARGEPUMP, 0x14,          // internal vcc
  80              SSD1306_MEMORYMODE, 0x00,          // 2 - page, 1 - vertical, 0 - horizontal
  81              SSD1306_SETCOLADDRESS,0,SSD1306_COLUMNS-1,        // Set column address to indicate boundaries
  82              SSD1306_SETPAGEADDRESS,0,SSD1306_PAGES-1,        // Set page address to indicate boundaries
  83          #if SSD1306_ROTATION == 0
  84              SSD1306_SEGREMAP | 0x1,            // column 127 mapped to SEG0
  85              SSD1306_COMSCANDEC,                // column scan direction reversed
  86          #elif SSD1306_ROTATION == 180
                  SSD1306_SEGREMAP | 0x0,            // column 127 mapped to SEG0
                  SSD1306_COMSCANINC,                // column scan direction reversed
              #endif
  90              SSD1306_SETCOMPINS, 0x02,          // sequential COM pins, disable remap
  91              //SSD1306_SETCONTRAST, 0xAF,         // contrast control
  92              SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period (1, 15)
  93              SSD1306_SETVCOMDETECT, 0x20,       // vcom deselect level
  94              SSD1306_DEACTIVATE_SCROLL,
  95              SSD1306_DISPLAYALLON_RESUME,
  96              //SSD1306_DISPLAYALLON,
  97              SSD1306_NORMALDISPLAY,
  98              //SSD1306_INVERTDISPLAY,
  99              //SSD1306_DISPLAYON
 100          };
 101          
 102          
 103          void ssd1306_printDigitLine(uint8_t line, uint8_t digit);
 104          
 105          
 106          void ssd1306_init(void){
 107   1        uint8_t i,d;
 108   1        ssd1306_send_command_start();
 109   1        for (i = 0; i < sizeof(initSSD1306sq); i++) {
 110   2          d=initSSD1306sq[i];
 111   2          I2C_Write(d);
 112   2        }
 113   1        I2C_Stop();
 114   1      }
 115          
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 3   

 116          
 117          void ssd1306_send_command_start(void){
 118   1        i2cBegin(0x3C, 0); // address of SSD1306
 119   1        I2C_Write(SSD1306_COMMAND);
 120   1      }
 121          
 122          void ssd1306_send_command(uint8_t cmd){
 123   1        ssd1306_send_command_start();
 124   1        I2C_Write(cmd);
 125   1        I2C_Stop();
 126   1      }
 127          
 128          void ssd1306_write_display_start(void){
 129   1        i2cBegin(0x3C, 0); // address of SSD1306
 130   1        I2C_Write(SSD1306_DATA);
 131   1      }
 132          
 133          
 134          void setCol(uint8_t col) {
 135   1        ssd1306_send_command(SSD1306_SETLOWCOLUMN | (col & 0XF));
 136   1        ssd1306_send_command(SSD1306_SETHIGHCOLUMN | (col >> 4));
 137   1      }
 138          
 139          
 140          void setRow(uint8_t row) {
 141   1        ssd1306_send_command(SSD1306_SETSTARTPAGE | row);
 142   1      }
 143          
 144          void ssd1306_clear_display(void){
 145   1      uint8_t i,i1;
 146   1        for(i1=0;i1<SSD1306_PAGES;i1++){
 147   2          setCol(0);
 148   2          setRow(i1);
 149   2          ssd1306_write_display_start();
 150   2          for(i=0;i<SSD1306_COLUMNS;i++){
 151   3            I2C_Write(0);
 152   3          }
 153   2          I2C_Stop();
 154   2        }
 155   1        setCol(0);
 156   1        setRow(0);
 157   1      }
 158          
 159          // 0.00 - 9.99
 160          void ssd1306_printNumber(uint8_t x, uint8_t y, int16_t num){
 161   1        // convert binary number to BCD
 162   1        uint8_t i, a[3];
 163   1        int16_t tmp;
 164   1        if(num<1000){
 165   2            tmp = num;
 166   2            a[0] = tmp / 100;
 167   2            tmp = tmp % 100;
 168   2            a[1] = tmp / 10;
 169   2            tmp = tmp % 10;
 170   2            a[2] = tmp;
 171   2        }else{
 172   2            a[0]=10;
 173   2            a[1]=10;
 174   2            a[2]=10;
 175   2        }
 176   1        // now print to LCD
 177   1        // we print SSD1306_PAGES rows and 3 digits with dot
 178   1        for(tmp=0;tmp<SSD1306_PAGES;tmp++){
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 4   

 179   2          setCol(x); // set the position
 180   2          setRow(tmp+y);
 181   2          // first digit
 182   2          ssd1306_write_display_start();
 183   2          ssd1306_printDigitLine(tmp,a[0]);
 184   2          I2C_Write(0);
 185   2          I2C_Write(0);
 186   2          // print dot
 187   2          for(i=0;i<DOT_WIDTH;i++){
 188   3            I2C_Write(dot_bitmap[i+tmp*DOT_WIDTH]);
 189   3          }
 190   2          I2C_Write(0);
 191   2          I2C_Write(0);
 192   2          // print second digit
 193   2          ssd1306_printDigitLine(tmp,a[1]);
 194   2          I2C_Write(0);
 195   2          I2C_Write(0);
 196   2          // print third digit
 197   2          ssd1306_printDigitLine(tmp,a[2]);
 198   2          I2C_Stop();
 199   2        }
 200   1      
 201   1      }
 202          
 203          void ssd1306_printDigitLine(uint8_t line, uint8_t digit){
 204   1        uint8_t i,tmp1;
 205   1        uint16_t tmp;
 206   1        for(i=0;i<NUMBER_WIDTH;i++){
 207   2          tmp = (i+line*NUMBER_WIDTH)+digit*NUMBER_WIDTH*NUMBER_HEIGHT;
 208   2          tmp1 = num_font_bitmap[tmp];
 209   2          I2C_Write(tmp1);
 210   2        }
 211   1      }
 212          
 213          // x,y - position (x:0-127,y:0-3)
 214          //w,h - size (w:0-127,h:0-3)
 215          void ssd1306_printBitmap(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t code *bmp){
 216   1        uint8_t ih, iw;
 217   1        uint16_t addr=0;
 218   1        for(ih=0;ih<h;ih++){
 219   2          setCol(x); // set the position
 220   2          setRow(y);
 221   2          ssd1306_write_display_start();
 222   2          for(iw=0;iw<w;iw++){
 223   3            I2C_Write(bmp[addr]);
 224   3            addr++;
 225   3          }
 226   2          I2C_Stop();
 227   2          y++;
 228   2        }
 229   1      }
 230          
 231          // x,y - position (x:0-127,y:0-3)
 232          //w,h - size (w:0-127,h:0-3)
 233          void ssd1306_printBitmapClear(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 234   1        uint8_t ih, iw;
 235   1        for(ih=0;ih<h;ih++){
 236   2          setCol(x); // set the position
 237   2          setRow(y);
 238   2          ssd1306_write_display_start();
 239   2          for(iw=0;iw<w;iw++){
 240   3            I2C_Write(0);
 241   3          }
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 5   

 242   2          I2C_Stop();
 243   2          y++;
 244   2        }
 245   1      }
 246          
 247          
 248          // 00h - 99h
 249          void ssd1306_printTimeH(uint8_t x, uint8_t y, uint8_t num){
 250   1        // convert binary number to BCD
 251   1        uint8_t i, a[2];
 252   1        int16_t tmp;
 253   1        if(num<100){
 254   2            tmp = num;
 255   2            a[0] = tmp / 10;
 256   2            tmp = tmp % 10;
 257   2            a[1] = tmp;
 258   2        }else{
 259   2            a[0]=10;
 260   2            a[1]=10;
 261   2        }
 262   1        // now print to LCD
 263   1        // we print 2 digits with h
 264   1        for(tmp=0;tmp<SSD1306_PAGES;tmp++){
 265   2          setCol(x); // set the position
 266   2          setRow(tmp+y);
 267   2          // first digit
 268   2          ssd1306_write_display_start();
 269   2          ssd1306_printDigitLine(tmp,a[0]);
 270   2          I2C_Write(0);
 271   2          // print second digit
 272   2          ssd1306_printDigitLine(tmp,a[1]);
 273   2          I2C_Write(0);
 274   2          // print h
 275   2          for(i=0;i<6;i++){
 276   3            I2C_Write(time_h_bitmap[i+tmp*6]);
 277   3          }
 278   2          I2C_Stop();
 279   2        }
 280   1      }
 281          
 282          // 00m - 99m
 283          void ssd1306_printTimeM(uint8_t x, uint8_t y, uint8_t num){
 284   1        // convert binary number to BCD
 285   1        uint8_t i, a[2];
 286   1        int16_t tmp;
 287   1        if(num<100){
 288   2            tmp = num;
 289   2            a[0] = tmp / 10;
 290   2            tmp = tmp % 10;
 291   2            a[1] = tmp;
 292   2        }else{
 293   2            a[0]=10;
 294   2            a[1]=10;
 295   2        }
 296   1        // now print to LCD
 297   1        // we print 2 digits with h
 298   1        for(tmp=0;tmp<SSD1306_PAGES;tmp++){
 299   2          setCol(x); // set the position
 300   2          setRow(tmp+y);
 301   2          // first digit
 302   2          ssd1306_write_display_start();
 303   2          ssd1306_printDigitLine(tmp,a[0]);
 304   2          I2C_Write(0);
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 6   

 305   2          // print second digit
 306   2          ssd1306_printDigitLine(tmp,a[1]);
 307   2          I2C_Write(0);
 308   2          // print h
 309   2          for(i=0;i<10;i++){
 310   3            I2C_Write(time_m_bitmap[i+tmp*10]);
 311   3          }
 312   2          I2C_Stop();
 313   2        }
 314   1      }
 315          
 316          // 00s - 99s
 317          void ssd1306_printTimeS(uint8_t x, uint8_t y, uint8_t num){
 318   1        // convert binary number to BCD
 319   1        uint8_t i, a[2];
 320   1        int16_t tmp;
 321   1        if(num<100){
 322   2            tmp = num;
 323   2            a[0] = tmp / 10;
 324   2            tmp = tmp % 10;
 325   2            a[1] = tmp;
 326   2        }else{
 327   2            a[0]=10;
 328   2            a[1]=10;
 329   2        }
 330   1        // now print to LCD
 331   1        // we print 2 digits with h
 332   1        for(tmp=0;tmp<SSD1306_PAGES;tmp++){
 333   2          setCol(x); // set the position
 334   2          setRow(tmp+y);
 335   2          // first digit
 336   2          ssd1306_write_display_start();
 337   2          ssd1306_printDigitLine(tmp,a[0]);
 338   2          I2C_Write(0);
 339   2          // print second digit
 340   2          ssd1306_printDigitLine(tmp,a[1]);
 341   2          I2C_Write(0);
 342   2          // print h
 343   2          for(i=0;i<5;i++){
 344   3            I2C_Write(time_s_bitmap[i+tmp*5]);
 345   3          }
 346   2          I2C_Stop();
 347   2        }
 348   1      }
 349          
 350          
 351          #ifdef DEBUG
              // 0000 - 9999
              void ssd1306_printNumberDebug(uint8_t x, uint8_t y, int16_t num){
                // convert binary number to BCD
                uint8_t a[4];
                int16_t tmp;
                if(num<10000){
                    tmp = num;
                    a[0] = tmp / 1000;
                    tmp = tmp % 1000;
                    a[1] = tmp / 100;
                    tmp = tmp % 100;
                    a[2] = tmp / 10;
                    tmp = tmp % 10;
                    a[3] = tmp;
                }else{
                    a[0]=10;
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 7   

                    a[1]=10;
                    a[2]=10;
                    a[3]=10;
                }
                // now print to LCD
                // we print NUMBER_HEIGHT rows and 4 digits with dot
                for(tmp=0;tmp<NUMBER_HEIGHT;tmp++){
                  setCol(x); // set the position
                  setRow(tmp+y);
                  ssd1306_write_display_start();
                  // first digit
                  ssd1306_printDigitLine(tmp,a[0]);
                  I2C_Write(0);
                  // print second digit
                  ssd1306_printDigitLine(tmp,a[1]);
                  I2C_Write(0);
                  // print third digit
                  ssd1306_printDigitLine(tmp,a[2]);
                  I2C_Write(0);
                  // print last digit
                  ssd1306_printDigitLine(tmp,a[3]);
                  I2C_Stop();
                }
              }
              #endif
 393          
 394          #ifdef SCROLLING
 395          volatile uint8_t xdata scrlbuff[11*2]; // set here maximum xram buffer for image rotation (the size of big
             -gest image to rotate
 396          
 397          // copy image to buffer to able to scroll (no output to LCD)
 398          void scroll_init(uint8_t w, uint8_t h, uint8_t code *bmp){
 399   1              //uint8_t xdata *buf = scrlbuff;
 400   1              uint8_t i;
 401   1              for(i=0;i<(w*h);i++){
 402   2                      scrlbuff[i]=bmp[i];
 403   2              }
 404   1      }
 405          
 406          void scroll_down(uint8_t w, uint8_t h){
 407   1              // read first vertical image line
 408   1              bit carry_f, carry_fbck;
 409   1              uint8_t b, v, c;
 410   1              for(c=0;c<w;c++){
 411   2                carry_f = 0;
 412   2                carry_fbck = 0;
 413   2                      for(v=0;v<h;v++){
 414   3                              b = scrlbuff[v*w+c]; // read first byte
 415   3                              carry_f = (b > 127 ? 1 : 0); // get bit to carry if needed
 416   3                              b = b<<1; // scroll one bit to the left
 417   3                              b |= carry_fbck; // set carry bit
 418   3                              scrlbuff[v*w+c] = b;
 419   3                              carry_fbck = carry_f; // store carry bit
 420   3                      }
 421   2                      scrlbuff[c] |= carry_fbck; // set carry bit
 422   2              }
 423   1      }
 424          
 425          void ssd1306_printBitmapX(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t xdata *bmp){
 426   1        uint8_t ih, iw;
 427   1        uint16_t addr=0;
 428   1        for(ih=0;ih<h;ih++){
 429   2          setCol(x); // set the position
C51 COMPILER V9.60.0.0   SSD1306                                                           08/28/2021 20:40:36 PAGE 8   

 430   2          setRow(y);
 431   2          ssd1306_write_display_start();
 432   2          for(iw=0;iw<w;iw++){
 433   3            I2C_Write(bmp[addr]);
 434   3            addr++;
 435   3          }
 436   2          I2C_Stop();
 437   2          y++;
 438   2        }
 439   1      }
 440          
 441          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1424    ----
   CONSTANT SIZE    =    343    ----
   XDATA SIZE       =     22    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      70
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
