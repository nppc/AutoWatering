C51 COMPILER V9.60.0.0   SCREENSAVER                                                       08/27/2021 21:40:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SCREENSAVER
OBJECT MODULE PLACED IN .\src\screensaver.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\Git
                    -\AutoWatering\Firmware\AutoWater\src\screensaver.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3
                    -) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//D
                    -evice/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/EFM8BB1/inc) PRINT(.\src\s
                    -creensaver.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\screensaver.OBJ)

line level    source

   1          //#pragma src
   2          #include "main.h"
   3          #include "screensaver.h"
   4          #include "SSD1306.h"
   5          #include "i2c.h"
   6          #include <stdlib.h> // for rand and qsort
   7          #include <string.h> // for memset
   8          
   9          
  10          volatile ssaverdots_t xdata ssdots[SSAVERMAXDOTS]; // use this buffer for generating random dots on the sc
             -reen
  11          volatile bit ssaverstart = 0, ssaverupdate=1;
  12          
  13          void initSSaver(void){
  14   1        uint16_t seed;
  15   1        // use temperature sensor to get initial random number
  16   1        // start first adc reading
  17   1        ADC0CN0_ADINT = 0; // reset interrupt flag
  18   1        ADC0CN0_ADBUSY = 1; // start NEXT ADC readings
  19   1        while(ADC0CN0_ADINT==0);
  20   1        // start second adc reading
  21   1        ADC0CN0_ADINT = 0; // reset interrupt flag
  22   1        ADC0CN0_ADBUSY = 1; // start NEXT ADC readings
  23   1        while(ADC0CN0_ADINT==0);
  24   1        seed = ADC0;
  25   1        srand (seed);
  26   1      }
  27          
  28          
  29          void bubblesortSsdots(uint8_t dotsnum){
  30   1        uint8_t i,j;
  31   1        bit sw;
  32   1        for(i=0;i<(dotsnum-1);i++){
  33   2            sw=0;
  34   2            for(j=0;j<(dotsnum-i-1);j++){
  35   3                if(ssdots[j].sramaddr>ssdots[j+1].sramaddr){
  36   4                    uint8_t tmp;
  37   4                    tmp = ssdots[j].x;
  38   4                    ssdots[j].x = ssdots[j+1].x;
  39   4                    ssdots[j+1].x = tmp;
  40   4                    tmp = ssdots[j].y;
  41   4                    ssdots[j].y = ssdots[j+1].y;
  42   4                    ssdots[j+1].y = tmp;
  43   4                    tmp = ssdots[j].sramaddr;
  44   4                    ssdots[j].sramaddr = ssdots[j+1].sramaddr;
  45   4                    ssdots[j+1].sramaddr = tmp;
  46   4                    sw=1;
  47   4                }
  48   3            }
  49   2            if(!sw) break;
  50   2        }
  51   1      }
C51 COMPILER V9.60.0.0   SCREENSAVER                                                       08/27/2021 21:40:12 PAGE 2   

  52          
  53          void fillSSaverBuffer(void){
  54   1        uint16_t i, i1, dotsnum = (glob.p_wait_cntr_m < SSAVERMAXDOTS ? glob.p_wait_cntr_m : SSAVERMAXDOTS); //d
             -ots count is equal to the minutes remaining, but not more than 40
  55   1        uint8_t x, y;
  56   1        //for(i=0;i<(dotsnum);i++){ssdots[i].x=0;ssdots[i].y=0;} // clear array
  57   1        memset(ssdots, 0, sizeof(ssdots));
  58   1        // generate random coordinates and make sure they will not repeat
  59   1        for(i=0;i<dotsnum;i++){
  60   2          x = (uint32_t)96 * rand() / RAND_MAX;
  61   2          y = (uint32_t)16 * rand() / RAND_MAX;
  62   2          // check do we have the same coords?
  63   2          for(i1=0;i1<i;i1++){
  64   3            if(ssdots[i1].x==x && ssdots[i1].y==y){
  65   4              // generate new coords
  66   4              x = (uint32_t)96 * rand() / RAND_MAX;
  67   4              y = (uint32_t)16 * rand() / RAND_MAX;
  68   4              // restart check
  69   4              i1=0;
  70   4            }
  71   3          }
  72   2          ssdots[i].x=x; ssdots[i].y=y;
  73   2          // and calculate address in sram of oled
  74   2          ssdots[i].sramaddr = x + (y>7 ? 96 : 0);
  75   2        }
  76   1        bubblesortSsdots(dotsnum);
  77   1      }
  78          
  79          
  80          void drawSSaverOled(void){
  81   1        uint8_t i, cp=0, dotsnum = (glob.p_wait_cntr_m < SSAVERMAXDOTS ? glob.p_wait_cntr_m : SSAVERMAXDOTS);;
  82   1        setCol(0);
  83   1        setRow(0);
  84   1        ssd1306_write_display_start();
  85   1        for(i=0;i<(96*2);i++){
  86   2              uint8_t tmp=0, d=0;
  87   2              if(cp<dotsnum) tmp=ssdots[cp].sramaddr;
  88   2              if(i==tmp){
  89   3                      //we found address with a star. Need to check how many stars we have at the same address
  90   3                      d = 1 << (ssdots[cp].y-(ssdots[cp].y>7 ? 8 : 0)); // first dot
  91   3                      while(1){
  92   4                              cp++;
  93   4                              if(cp==dotsnum) break; // we reached the end
  94   4                              if(ssdots[cp].sramaddr == tmp){
  95   5                                      d |= 1 << (ssdots[cp].y-(ssdots[cp].y>7 ? 8 : 0));
  96   5                              }else{
  97   5                                      break;
  98   5                              }
  99   4                      }
 100   3              }
 101   2          I2C_Write(d);
 102   2        }
 103   1        I2C_Stop();
 104   1      }
 105          
 106          // remove one star and add another
 107          void replaceSSaverStar(void){
 108   1              uint8_t i, x, y, cp, dotsnum = (glob.p_wait_cntr_m < SSAVERMAXDOTS ? glob.p_wait_cntr_m : SSAVERMAXDOTS);
 109   1              bit dup=0;
 110   1              cp = (uint32_t)dotsnum * rand() / RAND_MAX;
 111   1              if(cp==dotsnum){
 112   2                  cp=dotsnum-1;
 113   2              }
C51 COMPILER V9.60.0.0   SCREENSAVER                                                       08/27/2021 21:40:12 PAGE 3   

 114   1              x = (uint32_t)96 * rand() / RAND_MAX;
 115   1              y = (uint32_t)16 * rand() / RAND_MAX;
 116   1        if(x==96 || y==16){
 117   2            x--;
 118   2            y--;
 119   2        }
 120   1      
 121   1              // make sure it is unique
 122   1              for(i=0;i<dotsnum;i++){
 123   2                      if(x==ssdots[i].x && y==ssdots[i].y) dup=1; // we found duplicate it is fine to leave everything as it i
             -s
 124   2              }
 125   1              // update coordinates if needed
 126   1              if(!dup){
 127   2                ssdots[cp].x=x;ssdots[cp].y=y;
 128   2                      ssdots[cp].sramaddr = x + (y>7 ? 96 : 0);
 129   2                      bubblesortSsdots(dotsnum);
 130   2              }
 131   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1162    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    120    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
