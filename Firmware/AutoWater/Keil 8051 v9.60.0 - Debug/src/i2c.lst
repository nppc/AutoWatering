C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\src\i2c.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\src\Tennp\Git
                    -\AutoWatering\Firmware\AutoWater\src\i2c.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMI
                    -ZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/sh
                    -ared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/EFM8BB1/inc) PRINT(.\src\i2c.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\i2c.OBJ)

line level    source

   1          /***************************************************************************************************
   2                                              ExploreEmbedded Copyright Notice
   3          ****************************************************************************************************
   4           * File:   i2c.h
   5           * Version: 15.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: Contains the library routines for I2C read,write operation
   9          
  10          This code has been developed and tested on ExploreEmbedded boards.
  11          We strongly believe that the library works on any of development boards for respective controllers.
  12          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  13          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider buying the ExploreEmbedded boards.
  14          
  15          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  16          See also: http://www.opensource.org/licenses/bsd-license.php
  17          
  18          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  19          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION
  20          RELATED TO UPDATES.
  21          
  22          
  23          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  24          and without fee is hereby granted, provided that this copyright notices appear in all copies
  25          and that both those copyright notices and this permission notice appear in supporting documentation.
  26          ***************************************************************************************************/
  27          
  28          
  29          
  30          /***************************************************************************************************
  31                                       Revision History
  32          ****************************************************************************************************
  33          15.0: Initial version
  34          ***************************************************************************************************/
  35          
  36          //#include "delay.h"
  37          #include "i2c.h"
  38          
  39          
  40          /***************************************************************************************************
  41                                    Local Function declaration
  42          ***************************************************************************************************/
  43          static void i2c_Clock(void);
  44          static void i2c_Ack(void);
  45          static void i2c_NoAck(void);
  46          static void i2c_Delay(void);
  47          /**************************************************************************************************/
  48          
C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 2   

  49          
  50          
  51          
  52          
  53          
  54          
  55          /***************************************************************************************************
  56                                   void I2C_Init(void)
  57          ****************************************************************************************************
  58           * I/P Arguments: none.
  59           * Return value  : none
  60          
  61           * description  :This function is used to initialize the I2C module.
  62          ***************************************************************************************************/
  63           void I2C_Init(void)
  64           {
  65   1      
  66   1       }
  67          
  68          
  69          
  70           void i2c_Delay(void){
  71   1               //uint8_t i;
  72   1               //for(i=0;i<200;i++){}
  73   1               // very short delay. Can be extended if I2C bus will have issues.
  74   1       }
  75          
  76          /***************************************************************************************************
  77                                   void I2C_Start(void)
  78          ****************************************************************************************************
  79           * I/P Arguments: none.
  80           * Return value  : none
  81          
  82           * description  :This function is used to generate I2C Start Condition.
  83                           Start Condition: SDA goes low when SCL is High.
  84          
  85                                         ____________
  86                          SCL:          |            |
  87                                ________|            |______
  88                                     _________
  89                          SDA:      |         |
  90                                ____|         |____________
  91          
  92          ***************************************************************************************************/
  93          /*
  94           void I2C_Start(void)
  95          {
  96              SCL_PIN = 0;        // Pull SCL low
  97              SDA_PIN = 1;        // Pull SDA High
  98              i2c_Delay();
  99              SCL_PIN = 1;        //Pull SCL high
 100              i2c_Delay();
 101              SDA_PIN = 0;        //Now Pull SDA LOW, to generate the Start Condition
 102              i2c_Delay();
 103              SCL_PIN = 0;        //Finally Clear the SCL to complete the cycle
 104          }
 105          */
 106          
 107          
 108          
 109          
 110          /***************************************************************************************************
 111                                   void I2C_Stop(void)
C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 3   

 112          ****************************************************************************************************
 113           * I/P Arguments: none.
 114           * Return value  : none
 115          
 116           * description  :This function is used to generate I2C Stop Condition.
 117                           Stop Condition: SDA goes High when SCL is High.
 118          
 119                                         ____________
 120                          SCL:          |            |
 121                                ________|            |______
 122                                           _________________
 123                          SDA:            |
 124                                __________|
 125          
 126          ***************************************************************************************************/
 127          
 128          void I2C_Stop(void)
 129          {
 130   1          SCL_PIN = 0;            // Pull SCL low
 131   1          i2c_Delay();
 132   1          SDA_PIN = 0;            // Pull SDA  low
 133   1          i2c_Delay();
 134   1          SCL_PIN = 1;            // Pull SCL High
 135   1          i2c_Delay();
 136   1          SDA_PIN = 1;            // Now Pull SDA High, to generate the Stop Condition
 137   1      }
 138          
 139          
 140          
 141          
 142          
 143          
 144          
 145          
 146          /***************************************************************************************************
 147                                   void I2C_Write(uint8_t v_i2cData_u8)
 148          ****************************************************************************************************
 149           * I/P Arguments: uint8_t-->8bit data to be sent.
 150           * Return value  : none
 151          
 152           * description  :This function is used to send a byte on SDA line using I2C protocol
 153                           8bit data is sent bit-by-bit on each clock cycle.
 154                           MSB(bit) is sent first and LSB(bit) is sent at last.
 155                           Data is sent when SCL is low.
 156          
 157                   ___     ___     ___     ___     ___     ___     ___     ___     ___     ___
 158           SCL:   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 159                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___
 160          
 161           SDA:    D8       D7     D6      D5      D4       D3      D2      D1      D0     ACK
 162          
 163          
 164          ***************************************************************************************************/
 165          void I2C_Write(uint8_t v_i2cData_u8)
 166          {
 167   1          uint8_t i;
 168   1      
 169   1          for(i=0;i<8;i++)                   // loop 8 times to send 1-byte of data
 170   1          {
 171   2              SDA_PIN = v_i2cData_u8 & 0x80;     // Send Bit by Bit on SDA line
 172   2              i2c_Clock();                   // Generate Clock at SCL
 173   2              v_i2cData_u8 = v_i2cData_u8<<1;// Bring the next bit to be transmitted to MSB position
 174   2          }
C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 4   

 175   1      
 176   1          i2c_Clock();
 177   1      }
 178          
 179          
 180          
 181          
 182          
 183          
 184          /***************************************************************************************************
 185                                   uint8_t I2C_Read(uint8_t v_ackOption_u8)
 186          ****************************************************************************************************
 187           * I/P Arguments: none.
 188           * Return value  : uint8_t(received byte)
 189          
 190           * description :This fun is used to receive a byte on SDA line using I2C protocol.
 191                         8bit data is received bit-by-bit each clock and finally packed into Byte.
 192                         MSB(bit) is received first and LSB(bit) is received at last.
 193          
 194          
 195                   ___     ___     ___     ___     ___     ___     ___     ___     ___     ___
 196          SCL:    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 197                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |__
 198          
 199           SDA:    D8       D7     D6      D5       D4     D3       D2      D1     D0      ACK
 200          
 201          
 202          ***************************************************************************************************/
 203          uint8_t I2C_Read(uint8_t v_ackOption_u8)
 204          {
 205   1          uint8_t i, v_i2cData_u8=0x00;
 206   1      
 207   1          SDA_PIN =1;               //Make SDA as I/P
 208   1          for(i=0;i<8;i++)     // loop 8times read 1-byte of data
 209   1          {
 210   2              i2c_Delay();
 211   2              SCL_PIN = 1;         // Pull SCL High
 212   2              i2c_Delay();
 213   2      
 214   2              v_i2cData_u8 = v_i2cData_u8<<1;    //v_i2cData_u8 is Shifted each time and
 215   2              v_i2cData_u8 = v_i2cData_u8 | SDA_PIN; //ORed with the received bit to pack into byte
 216   2      
 217   2              SCL_PIN = 0;         // Clear SCL to complete the Clock
 218   2          }
 219   1          if(v_ackOption_u8==1)  //Send the Ack/NoAck depending on the user option
 220   1          {
 221   2              i2c_Ack();
 222   2          }
 223   1          else
 224   1          {
 225   2              i2c_NoAck();
 226   2          }
 227   1      
 228   1          return v_i2cData_u8;           // Finally return the received Byte*
 229   1      }
 230          
 231          
 232          
 233          
 234          
 235          /***************************************************************************************************
 236                                          Local functions
 237          ***************************************************************************************************/
C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 5   

 238          
 239          
 240          /***************************************************************************************************
 241                                   static void i2c_Clock()
 242          ****************************************************************************************************
 243           * I/P Arguments: none.
 244           * Return value  : none
 245          
 246           * description  :This function is used to generate a clock pulse on SCL line.
 247          ***************************************************************************************************/
 248          static void i2c_Clock(void)
 249          {
 250   1              i2c_Delay();
 251   1          SCL_PIN = 1;            // Wait for Some time and Pull the SCL line High
 252   1          i2c_Delay();        // Wait for Some time
 253   1          SCL_PIN = 0;            // Pull back the SCL line low to Generate a clock pulse
 254   1      }
 255          
 256          
 257          
 258          
 259          
 260          /***************************************************************************************************
 261                                   static void i2c_Ack()
 262          ****************************************************************************************************
 263           * I/P Arguments: none.
 264           * Return value  : none
 265          
 266           * description  :This function is used to generate a the Positive ACK
 267                           pulse on SDA after receiving a byte.
 268          ***************************************************************************************************/
 269          static void i2c_Ack(void)
 270          {
 271   1          SDA_PIN = 0;        //Pull SDA low to indicate Positive ACK
 272   1          i2c_Clock();    //Generate the Clock
 273   1          SDA_PIN = 1;        // Pull SDA back to High(IDLE state)
 274   1      }
 275          
 276          
 277          
 278          
 279          
 280          /***************************************************************************************************
 281                                  static void i2c_NoAck()
 282          ****************************************************************************************************
 283           * I/P Arguments: none.
 284           * Return value  : none
 285          
 286           * description  :This function is used to generate a the Negative/NO ACK
 287                           pulse on SDA after receiving all bytes.
 288          ***************************************************************************************************/
 289          static void i2c_NoAck(void)
 290          {
 291   1          SDA_PIN = 1;         //Pull SDA high to indicate Negative/NO ACK
 292   1          i2c_Clock();     // Generate the Clock
 293   1          SCL_PIN = 1;         // Set SCL
 294   1      }
 295          
 296          
 297          /*
 298          // Transmit a byte and read the ack bit
 299          // if we get a NACK (negative acknowledge) return 0
 300          // otherwise return 1 for success
C51 COMPILER V9.60.0.0   I2C                                                               08/27/2021 21:40:10 PAGE 6   

 301          //
 302          static bool i2cByteOut(uint8_t b)
 303          {
 304                  uint8_t i;
 305                  bool ack;
 306          
 307                  for (i=0; i<8; i++)
 308                  {
 309                          if (b & 0x80)
 310                                  SDA_PIN = 1;    // set data line to 1
 311                          else
 312                                  SDA_PIN = 0;    // set data line to 0
 313                          SCL_PIN = 1; // clock high (slave latches data)
 314                          i2c_Delay();
 315                          SCL_PIN = 0; // clock low
 316                          b <<= 1;
 317                  } // for i
 318                  // read ack bit
 319                  SDA_PIN = 1; // set data line for reading
 320                  SCL_PIN = 1; // clock line high
 321                  i2c_Delay();
 322                  ack = SDA_PIN;
 323                  SCL_PIN = 0; // clock low
 324                  i2c_Delay();
 325                  SDA_PIN = 0; // data low
 326            return !ack; //(ack == 0) ? 1:0; // a low ACK bit means success
 327          }
 328          */
 329          
 330          
 331          bool i2cBegin(uint8_t addr, bool bRead)
 332          {
 333   1              //bool rc;
 334   1              SDA_PIN = 0; // data line low first
 335   1              i2c_Delay();
 336   1              SCL_PIN = 0; // then clock line low is a START signal
 337   1              //I2C_Start();
 338   1              addr <<= 1;
 339   1              if (bRead)
 340   1                      addr++; // set read bit
 341   1              //rc = i2cByteOut(addr); // send the slave address and R/W bit
 342   1              I2C_Write(addr); // send the slave address and R/W bit
 343   1              return 1;
 344   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    151    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
